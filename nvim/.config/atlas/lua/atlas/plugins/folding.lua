return {
  -- {
  --   "chrisgrieser/nvim-origami",
  --   event = "BufReadPost",
  --   opts = true,
  -- },
  -- {
  --   "kevinhwang91/nvim-ufo",
  --   dependencies = "kevinhwang91/promise-async",
  --   event = "VimEnter",
  --   keys = {
  --     {
  --       "zm",
  --       function()
  --         require("ufo").closeAllFolds()
  --       end,
  --     },
  --     {
  --       "zr",
  --       function()
  --         require("ufo").openFoldsExceptKinds({ "comment", "imports" })
  --       end,
  --     },
  --     {
  --       "zR",
  --       function()
  --         require("ufo").openFoldsExceptKinds({})
  --       end,
  --     },
  --     {
  --       "z1",
  --       function()
  --         require("ufo").closeFoldsWith(1)
  --       end,
  --     },
  --     {
  --       "z2",
  --       function()
  --         require("ufo").closeFoldsWith(2)
  --       end,
  --     },
  --     {
  --       "z3",
  --       function()
  --         require("ufo").closeFoldsWith(3)
  --       end,
  --     },
  --     {
  --       "z4",
  --       function()
  --         require("ufo").closeFoldsWith(4)
  --       end,
  --     },
  --   },
  --   init = function()
  --     vim.opt.foldlevel = 99
  --     vim.opt.foldlevelstart = 99
  --   end,
  --   opts = {
  --     provider_selector = function(_, ft, _)
  --       -- INFO some filetypes only allow indent, some only LSP, some only
  --       -- treesitter. However, ufo only accepts two kinds as priority,
  --       -- therefore making this function necessary :/
  --       local lspWithOutFolding = { "markdown", "sh", "css", "html" }
  --       if vim.tbl_contains(lspWithOutFolding, ft) then
  --         return { "treesitter", "indent" }
  --       end
  --       return { "lsp", "indent" }
  --     end,
  --     -- when opening the buffer, close these fold kinds
  --     -- use `:UfoInspect` to get available fold kinds from the LSP
  --     close_fold_kinds_for_ft = {
  --       default = { "imports", "comment" },
  --     },
  --     open_fold_hl_timeout = 800,
  --     fold_virt_text_handler = function(virtText, lnum, endLnum, width, truncate)
  --       local hlgroup = "NonText"
  --       local newVirtText = {}
  --       local suffix = "    " .. tostring(endLnum - lnum)
  --       local sufWidth = vim.fn.strdisplaywidth(suffix)
  --       local targetWidth = width - sufWidth
  --       local curWidth = 0
  --       for _, chunk in ipairs(virtText) do
  --         local chunkText = chunk[1]
  --         local chunkWidth = vim.fn.strdisplaywidth(chunkText)
  --         if targetWidth > curWidth + chunkWidth then
  --           table.insert(newVirtText, chunk)
  --         else
  --           chunkText = truncate(chunkText, targetWidth - curWidth)
  --           local hlGroup = chunk[2]
  --           table.insert(newVirtText, { chunkText, hlGroup })
  --           chunkWidth = vim.fn.strdisplaywidth(chunkText)
  --           if curWidth + chunkWidth < targetWidth then
  --             suffix = suffix .. (" "):rep(targetWidth - curWidth - chunkWidth)
  --           end
  --           break
  --         end
  --         curWidth = curWidth + chunkWidth
  --       end
  --       table.insert(newVirtText, { suffix, hlgroup })
  --       return newVirtText
  --     end,
  --   },
  -- },
}
